redis特点：
    支持数据持久化：可以将内存中的数据保持在磁盘中，重启时可以再次加载使用
    支持多种数据结构：不止简单的key-value，还有list，set，hash，zset,String。
    支持数据备份：
1、安装配置redis
    a）下载，传输，解压安装包
    b）编译redis 进入解压目录 执行：make，如果没有gcc会报错。
    c）安装gcc：yum -y install gcc //就在redis目录下安装就好。查看gcc：gcc -v
    d）清理工作：make distclean
    e）再次执行make指令
    f）make install :将redis所有可执行的bin拷贝到/usr/local/bin 之后在任何目录下都可执行redis了

2、启动redis：
    1）前台启动：redis-server
    2）后台启动：redis-server &
    3）启动redis服务时，指定配置文件(改了配置文件用这个)：redis-server redis.conf &

3、关闭redis服务：
    1）通过kill命令：
        ps -ef|grep redis 查看pid
        kill -9 pid  //容易丢失数据
    2）通过‘ redis-cli shutdown ’关闭

4、redis客户端：用来连接redis服务，向redis服务端发送命令，并显示redis服务处理结果
    redis-cli：是redis自带客户端，使用命令redis-cli就可以启动redis的客户端程序
               默认连接127.0.0.1（本机）上的6379端口，也可以指定端口：redis-cli -p 端口号
               也可以指定其他机器上的：redis-cli -h ip地址 -p 端口。
    退出客户端：exit或者quit

5、redis的基本知识
   1）测试redis服务的性能(得退出客户端才能测)：redis-benchmark
   2）查看redis服务是否正常运行：ping 如果正常---返回pong
   3）查看redis服务器的统计信息：info [信息端]：info Replication查看集群
   4）redis的数据库实例：作用雷士于mysql的数据库实例；不一样的是redis中的数据库实例只能由redis服务来创建和维护，
      开发人员不能修改和自行创建，默认请款下redis会自动创建16个数据库实例，并且给这些数据库实例进行编号，从0-15，
      也可以通过配置文件指定redis自动创建的数据库个数；本身占用的存储空间就很少，所以不台浪费。默认连接的是0号库里。
   5）select:index(号数)切换数据库实例。
   6）存：set k1 vi   取：get k1 得"v1" 。
   6）查看当前数据库实例中所以key的数量：dbsize
   7）查看当前数据库实例中所以key是啥：keys *
   8）清空数据库实例：flushdb
   9）清空所以数据库实例：flushall
   10）查看redis的所有配置信息：config get *
       查看指定信息的话用关键字代替*就好了

6、redis的五种数据结构
   String：单个key:单个value
   list：单个key:多个有序value（可重复，顺序是插入顺序）
   set：单个key:多个无序value（不可重复）
   pojo：hash存：单个key:对象(属性名:值)
   zset：set集合的升级版(按特征排序)：单个key:多个有序value

7、redis中的操作命令（相当于mysql的sql语句）：
    1）keys 通配符(*:所有0~n字符；?:1个字符；[]:括号里的一个字符)
    2）exists key1 ：判断该key1是否存在，存在返回1 。
    3）exists key1 key2 key3：判断这些key是否存在，返回的是存在的个数。
    4）move key index：移动指定key到指定的数据库实例
       如：move k1 1 : 把k 移动到1
    5）ttl k1：查看指定key1的剩余生存时间(如果没设置生存时间返回-1，表示一直在。-2表示被删除了)
    6）expire key seconds 设置key的最大生存时间
       如：expire k1 20：设置k1的最大时间20秒
    7）type k1；查看k1的数据类型
    8）rename k1 k2：重命名k1为k2
    9）del k1 :删除k1 返回的是指定删除的数量

8、redis中有关String类型数据的操作命令：
    1）存储：set k1 v1 注：如果存在了会覆盖内容
    2）获取：get k1 -> v1
    3）最加字符串：append k1 v1 —> 追加字符串的长度
    4）获取字符串长度：stelen k1
    5）将字符串数值进行+1运算：incr k1 -> +1之后的数据 注如果k1不存在，会设置一个k1，初始化为0，再+1运算。如果不是数值就会报错
    6）-1运算：decr k1 -> -1后的数
    7）加offset运算：incrby k1 10 —>返回k1+10后的数
    8）减offset运算：decrby k1 10 —>返回k1-10后的数
    9）截取字符串：getrange k1 1 3 —>截取第2个到第4个字符 注下标也可以是负数，表示自右向左，最右是-1。
   10）覆盖字符串：setrange k1 1 huang -> 改之后字符串的长度 ；表示覆盖k1的字符串从下标唯一开始
   11）设置字符串数据的同时设置最大声明周期：setex k1 20 v1:设置k1值为v1声命周期为20秒。
   12）sernx:和set对比，如果key存在不覆盖内容。放弃设置
   13）批量将String类型的数据设置到redis中：mset k1 vi k2 v2 k3 v3
   14）批量从redis中获取String类型的数据：mget k1 k2 k3 注：如果不存在该key则返回nil
   15）批量设置,只有一个存在全部放弃，不覆盖：msetnx k1 v1 k2 v2 k3 v3

9、redis中有关list类型数据的操作（单个key多个value）：
    1）最左是表头，最右是表尾，最左坐标是0，最右是len-1或-1。
    2）顺序就是存进去的顺序。
    3）从表头将一个或者多个值一次插入到列表(左侧):
        如：lpush k1 v1 v2 v3 : v3v2v1
        再：lpush 4 5 : 54v3v2v1
    4）获取指定列表中的元素：lrange k1 1 2 : 获取k1列表中第二到第三的元素。0 ~ -1 代表列表中所有元素
    5）从表尾将一个或多个值放到列表1(右侧)：
        如：rpush k1 1 2 3 : 123
        再：rpush k1 4 5 : 12345 再：lpush m n : nm12345
    6）移出表头元素并返回表头元素：lpop k1 ；rpop k1（移表尾）
    7）获取列表指定下标的元素：lindes k1 2
    8）获取列表指定长度：llen k1
    9）移除指定列表中的某一数据：lrem key count value //count>o从左侧删除等于value的元素，<0从右侧，=0移除所有相等元素
       如：lrem k1 2 a : 从左侧删除2个等于a的元素
   10）截取指定列表中指定下标取接的元素组成新的列表，并赋给key：
       ltrim key startIndex endIndex
       如：lpush list04 1 2 3 4 5  结果：5 4 3 2 1
           ltrim list04 1 3
           lrange list04 0 -1      结果：4 3 2
   11）将value插入到指定列表中位于pivot元素之前/之后的位置：linsert key before/after pivot vlaue
       linsert list04 before 2 8   结果：5 4 3 8 2 1
       linsert list04 after 2 8    结果：5 4 3 8 2 8 1


10、redis中有关set类型数据的操作命令（单个key-多个无序不可重复的value，不用考虑下标了）：
    1）存,一个或多个到集合中：sadd set01 a b c 注：如果重复忽略，返回的是成功个数
    2）取,所有元素：smembers set01
    3）求存,元素是否存在sismember set01 a 注：存在返回1,不存在返回0
    4）求长，求长度：scard set01
    5）删，一个或多个元素：srem set01 a b 注：返回的是移出成功的个数
    6）随取，随机获取元素：srandmember set01 [count>0随机count个不能重复，<0可重复]
    7）随删，随机移除元素：spop set01 [count]
    8）移，将元素移到另一集合：smove set01 set02 a
    9）返回一个集合有其他集合没有的元素：
       sdiff set01 set02
   10）获取指定集合中都有的元素：sinter set01 set02
   11）求并，所有集合：sunion set01 set02

11、redis中有关hash类型数据的操作命令（单个key,多个field域:value（对象））
    1）存,一个或多个field-value到哈希表中：hset stu id 1001 name xu age 23 注：如果存在会覆盖
    2）取,只能一个通过field：hget stu name 结果xufengnian
    3）存,专业的存多个：hmset stu2 id 1002 name shabi age 23
    4）取，专业取多个：hmget stu2 id name
    5）取，所有field和value：hgetall stu
    6）删，指定删一个或多个：hdel stu name age
    7）取field个数：hlen stu
    8）求存，判断是否存在field：hexists stu field
    9）取field，取所有的field：hkeys stu
   10）取value，取所有value：hvals stu
   11）对hash表中指定field值进行加法运算：hincrby stu age 5
   12）对hash表中指定field值进行浮点加法运算：hincrbyfloat stu age 8.5
   13）存如果key-field存在不覆盖hsetnx stu id 1001 name xufengnian age 23

12、redis中有关zset类型数据的操作命令（有序集合，顺序不是根据插入的顺序，而是关联的分数，而且必须关联，set的升级版，元素不可重复，分数可重复）：
    1）将一个或者多个member及其score值加入有序集合：zadd key score member [score member ...]
       如：zadd zset01 20 z1 30 z2 50 z3  注：顺序是score分数决定的，元素存在分数覆盖
    2）获取集合中指定下标区间元素：zrange key startIndex endIndex [withscores带了显示分数]
       如：zrange zset01 0 -1
    3）获取集合中指定分数区间的元素：zrangebyscore key min max [withcores]
       如：zrangebyscore zset01 30 50 withscores
    4）删除集合中一个或者多个元素：zrem key member [member ...]
       如：zrem zset01 z1 z2
    5）获取集合个数：zcard zset01
    6）获取某个元素的序号：zrank key member
       如：zrank zset01 z1 结果是0
       zrevrank zset z1 ——>(反向序号)2  注任何排名都有反向的排名
    7）获取指定分数区间的元素个数：zcount key min max
       如：zcount zset01 20 50 结果3
    8）获取指定元素的分数：zscore zset01 z1 ——> 20

13、redis配置文件：在redis目录下的redis.conf，如果不使用会按照默认的参数运行。如果改了要用就要指定使用配置文件
    1）redis配置文件中关于网络的配置：
       port：指定redis服务所使用的端口，默认使用6379。
       bind：配置客户端连接redis服务时，所能用的ip地址，默认可以使用redis所在主机上的任何一个ip都可以用，一般会配置一个正实的。
       如果配置了port和bind,则客户端连接redis服务时，必须指定端口和ip
           reids-cli -h 192.168.8.128 -p 6380
           reids-cli -h 192.168.8.128 -p 6380 shutdown
       tcp-keepalive：Tcp连接保活策略，可以通过tcp-keepalive配置项来进行设置，单位为秒，假如设置为60秒，
       则server端会每60秒向连接空闲的客户端发起一次ACK请求，以检查客户端是否已经挂掉，对于无响应的客户端则会关闭其连接。
       如果设置为0，则不会进行保活检测。
    2）常规配置：
       loglevel:配置日志级别，notice：一般级别，还有调试信息debug，错误信息warning。（一般是开发阶段，运维设置的）
       logfile: 指定配置文件。redis在运行过程中会输出一些日志信息，默认情况下在这些信息会输出到控制台，
                我们可以使用logfile配置日志文件，使redis把日志信息输出到指定文件中，如：mylog.log。
       databases：默认创建数据库实例16个
    3）安全配置（用的不多，一般不用追求高效性）
       requirepass:需要在protected-mode=y时才起作用。用了启动时必须密码启动redis-cli -h ip -p port -a pwd

14、redis的持久化（数据存在内存，快，但是不安全，所以支持持久化(也会影响性能)，如果宕机了存在磁盘里，下次启动又读取出来使用）
    RDB是默认的数据持久策略，redis开起时它就开启了
    1）RDB策略：在指定时间间隔内，redis服务执行指定次数的写操作，会自动触发一次持久化操作
       save <seconds> <changes>:配置持久化策略，数字单位时秒
               默认：1分钟内改变了10000次
               或者5分钟之内改变了10次
               戳着15分钟内改变了1次
       dbfilename:redis持久化数据生成的文件名，默认时dump.rdb，也可以自己配置
       dir：redis持久化数据生成文件保存的目录，默认时./即redis的启动目录，也可以自己配置。
    2）AOF策略：采用操作日志来记录redis服务进行的每一次写操作。每次redis服务启动时，都会重新执行一遍指令。一般不用，效率低。
        appendonly：配置是否开启AOF，yes表示开启，no表示关闭，默认是no。
        appendfilename:配置操作日志文件
  小结：根据数据的特点开启那种持久化，一般情况下，开启RDB足够了，redis存放的数据一般关系型数据库有备份，所以很多时候不用redis持久化

15、redis的事务：
    事务：把一组数据库操作放在一起，保证操作的原子性，要么同时成功，要么同时失败。
    redis允许把一组redis命令放在一起执行，把命令进行序列化，然后一起执行，保证部分原子性(不能保证全部原子性)。
    1）multi：用来标记事务的开启。
        如：multi
            set k1 v1
            set k2 v2
            exec
    2）exec：用来执行事务队列中所有命令
    3）redis的事务只能保证部分原子性
        a）如果一组命令中，有在压入事务队列中发生错误的命令，则都不执行，保证原子性
            如：multi
                set k1 v1
                seta kk vv  压入队列过程中出错
                set k2 v2
                exec
        b）如果一组命令压入过程中正常，但是执行事务队列命令时发生了错误，则只会影响发生错误的命令，不会影响其他，不能保证原子性
             如：multi
                set k3 v3
                incr k1     执行才出错
                set k4 v4
                exec
    4）discard：放弃已经压入的事务队列
        如：multi
            set k5 v5
            set k6 v6
            discard
    5） watch：监控某一个键，当事务在执行过程中，此健代码的值发生变化，则本事务放弃执行，否则正常执行（相当于乐观锁，版本不一样就返回）
        如：set balance 100
            set balabce2 200
            set version 1
            watch version        监控健的值改变了就放弃事务
            multi
            decrby balance 50
            incrby balance2 50
            exec
    6）unwatch：放弃监控的所以键。和上面相反满足条件放弃监控
        如：watch version
            判断语句
            unwatch
    7）事务小结：单独隔离操作不会被打断除非watch
                不保证原子性

16、redis消息的发布与订阅：
    redis客户端订阅频道，消息的发布者往频道上发布消息，所有订阅此频道的客户端都能接收到消息
    1）subscribe ch1 ch2 ch3；订阅1个或多个消息
    2）publish ch1 hello:发布消息hello到ch1
    3）工作中百分百不会用，用activeMQ2

17、redis的主从复制(主写从读，多主多从，主少从多，主写分离，主同步到从)：
    搭建一主二从redis集群
    1）搭建三台redis服务：使用一个redis模拟三台redis服务
        提供三分redis配置文件：redis6739.conf、redis6380.conf、redis6381.conf
            修改三分配置文件：以6379为例，先复制redis.conf，再改port为6379，最好改pidfile后数与端口号一致。
            然后logfile"6379.log"。还有dbfilename dump6379.rdb，演示时为了方便ip改为127.0.0.1
            最后启动redis:redis-server redis6379.conf &
    2）通过redis客户端分别连接三台redis服务：
        redis-cli -h 127.0.0.1 -p 6379
        redis-cli -h 127.0.0.1 -p 6380
        redis-cli -h 127.0.0.1 -p 6381
    2）查看三台redis服务在集群中的主从角色：info replication
        role:master主机
        connected_slaves:0连接数为0
        注默认情况下所以redis服务都是主机，都可以写和读
    3）设置主从关系（6379为主，剩下两个为从机，设从不设主）
        在6380上执行：slaveof 127.0.0.1 6379
        在6379上执行：slaveof 127.0.0.1 6379
        此时设置好了，主机所有的数据都同步到从机上了也就是全量复制
    4）全量复制：一旦主从关系确定，会自动把主机所有的数据都同步到从机上了
    5）增量复制：主库上写的数据会同步到从库
        如：往6379上添加数据set k2 v2
    6）主写从读，读写分离（从只能读，主可以读也可以写，一般不读）
    7）一台主机可以有多台从机，从机只能连接一台主机，多个主机会有结点的概念
    8）主机宕机：从机原地待命（读还能读，不过数据不会更新了）
       如：关闭6379服务：redis-cli -h 127.0.0.1 -p 6379 shutdown
    9）主机恢复：一切恢复正常：
        如：重启6379
    10）从机宕机：主机少一个从机，其他从机不变
        如关闭6380
    11）从机恢复：从机恢复为主机，还需要重新设置主从关系
        如重启6380，6380变为主机，6379还是一台连接
    12）从机上位：
        a）主机宕机了，修不好：关闭6379
        b）断开原来的主机：在6380 上执行：slaveof no one
        c）重新设置主从关系（得一个个设置）：在6381上执行：slaveof 127.0.0.16380
    13）原主机恢复：变成孤家寡人
        重启6379，没有连接了
    14）天堂变地狱：让6379从属6381（它即是主机又是从机，不过也不可以写数据）
        在6379执行：slaveof 127.0.0.1 6381
    小结：一台主机配置多台从机，一台从机又可以配置多台从机，从而形成一个庞大的集群结构，
         减轻一台主机的压力，但是增加了服务间的延迟时间。

18、redis哨兵模式（不知到主机啥时候宕机，所以就有了哨兵，如果监测到主机宕机，就找个从机上位）：
    1）搭建三台redis服务器，一主二从集群架构
    2）提供哨兵得配置文件：在redis安装目录下创建redis_sentinel.conf
       并编辑里面得内容：sentinel monitor dc-redis 127.0.0.1 6379 1
       sentinel表示哨兵 monitor表示监控 dc-redis表示名字随便起 127.0.0.1 6379 表示监控的主机
       1 表示票数，多少个从机多少票，票数达到设置的就上位，
    3）启动哨兵服务：redis-sentinel
        如：redis-sentinel redis_sentinel.conf
    4）主机宕机：哨兵启动，自动选择从机上位
        如：关闭6379
    5）主机恢复：自动从属于新的主机

19、Jedis:在java应用中操作redis，Jedis几乎涵盖了redis的所有命令。操作redis的命令在Jedis中以方法的形式出现

20、redis的第三方管理工具redis-desktop-manager相当于navicat,看个人兴趣用，可视化界面更快：
    1）直接点击安装就行
    2）左下角绿色加号点击连接，有密码就输入密码，没有就直接连接



